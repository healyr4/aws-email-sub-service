service: aws-email-subscription-service
frameworkVersion: '3'

custom:
  tableName: 'users-table-${sls:stage}'
  region: ${self:provider.region}
provider:
  name: aws
  region: eu-west-1
  runtime: nodejs18.x
  stage: dev
  profile: serverless-admin
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*" 
        - Effect: Allow
          Action: SNS:Publish
          Resource: !Ref FactsMessages
  environment:
    # Change! ------------------------
    SENDGRID_API_KEY: "SG.MY-KEY"
    USERS_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    SNS_TOPIC_ARN: arn:aws:sns:eu-west-1:468644890612:facts-messages-dev

# Add packaging information here
package:
 
 patterns:
   - '!front-end/**'
   - '!venv/**'
   - '!README.md'
   - '!build/**'
  # Package each function individually 
 individually: false

functions:
  facts:
    handler: handler/getFacts.getFacts
    events:
      - http:
          path: facts
          method: get 
          cors: true

  add:
    handler: handler/addSubscriber.addSubscriber
    events:
      - http:
          path: subscribe
          method: post
          cors: true

  staticMailer:
    handler: handler/staticMailer.staticMailer
    events:
      - http:
          path: static-mailer
          method: post
          cors: true  

  sendEmail:
    handler: handler/sendEmail.sendEmail
    events:
      - http:
          path: send-email
          method: post
          cors: true
      # 19:00 every day in UTC
      - schedule: cron(0 19 * * ? *)

  getSubs:
    handler: handler/getSubs.getSubs
    events:
      - http:
          path: get-subs
          method: get
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

    FactsMessages:
      Type: AWS::SNS::Topic 
      Properties:
        # Create a topic to be subscribed to
        TopicName: facts-messages-${self:provider.stage}
    FactsMessagesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref FactsMessages
        DeliveryPolicy: 
          healthyRetryPolicy:
            numRetries: 10
            minDelayTarget: 20
            maxDelayTarget: 300
            backoffFunction: exponential
          throttlePolicy:
            maxReceivesPerSecond: 5
        # Change! ------------------------
        Endpoint: my-email@email.com
        Protocol: email

